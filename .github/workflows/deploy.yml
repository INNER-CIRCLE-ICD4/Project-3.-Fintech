name: deploy.yml

on:
  # 어플리케이션 구동에 필요한 경로들 취득
  push:
    paths:
      - ".github/workflows/**"
      - "sendy-legacy-api/**"
      - "sendy-notification-api/**"
      - "sendy-notification-consumer/**"
      - "sendy-shared-kafka/**"
      - "sendy-shared-mongo/**"
      - "sendy-transfer-consumer/**"
      - "sendy-transfer-domain/**"
      - "sendy-transfer-producer/**"
      - "sendy-transfer-scheduler/**"
      - "sendy-user-producer/**"
      - "build.gradle"
      - "settings.gradle.kts"
    branches:
      - develop

permissions:
  contents: write
  packages: write

jobs:
  makeTagAndRelease:
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.create_tag.outputs.new_tag }}
    steps:
      - uses: actions/checkout@v4

      - name: Create Tag
        id: create_tag
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.create_tag.outputs.new_tag }}
          release_name: Release ${{ steps.create_tag.outputs.new_tag }}
          body: ${{ steps.create_tag.outputs.changelog }}
          draft: false
          prerelease: false

  buildImageAndPush:
    name: 도커 이미지 빌드와 푸시
    needs: makeTagAndRelease
    runs-on: ubuntu-latest
    env:
      DOCKER_IMAGE_NAME: sendy
    steps:
      - uses: actions/checkout@v4

      - name: application-secret.yml 생성
        env:
          APPLICATION_SECRET: ${{ secrets.APPLICATION_SECRET_YML }}
        run: |
          mkdir -p src/main/resources
          printf "%s" "$APPLICATION_SECRET" > src/main/resources/application-secret.yml

      - name: Docker Buildx 설치
        uses: docker/setup-buildx-action@v3

      - name: 레지스트리 로그인 (GHCR)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: set lower case owner name
        id: set_owner
        run: |
          OWNER_LC=$(echo "${OWNER}" | tr '[:upper:]' '[:lower:]')
          echo "OWNER_LC=$OWNER_LC" >> $GITHUB_ENV
          echo "owner_lc=$OWNER_LC" >> $GITHUB_OUTPUT
        env:
          OWNER: ${{ github.repository_owner }}

      - name: 빌드 앤 푸시
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          cache-from: type=registry,ref=ghcr.io/${{ steps.set_owner.outputs.owner_lc }}/${{ env.DOCKER_IMAGE_NAME }}:cache
          cache-to: type=registry,ref=ghcr.io/${{ steps.set_owner.outputs.owner_lc }}/${{ env.DOCKER_IMAGE_NAME }}:cache,mode=max
          tags: |
            ghcr.io/${{ steps.set_owner.outputs.owner_lc }}/${{ env.DOCKER_IMAGE_NAME }}:${{ needs.makeTagAndRelease.outputs.tag_name }}
            ghcr.io/${{ steps.set_owner.outputs.owner_lc }}/${{ env.DOCKER_IMAGE_NAME }}:latest

  deploy:
    runs-on: ubuntu-latest
    needs: [buildImageAndPush]
    steps:
      - name: AWS 크레덴셜 설정
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: set lower case owner name (deploy)
        id: set_owner_deploy
        run: |
          OWNER_LC=$(echo "${OWNER}" | tr '[:upper:]' '[:lower:]')
          echo "OWNER_LC=$OWNER_LC" >> $GITHUB_ENV
        env:
          OWNER: ${{ github.repository_owner }}

      - name: 설정 파일 생성
        env:
          DOCKER_COMPOSE_PROD_SPRING: ${{ secrets.DOCKER_COMPOSE_PROD_SPRING_YML }}
        run: |
          mkdir -p docker-compose
          printf "%s" "$DOCKER_COMPOSE_PROD_SPRING" > docker-compose/docker-compose.prod.spring.yml

      - name: 설정 파일 EC2로 전송
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SPRING_EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: |
            docker-compose/docker-compose.prod.spring.yml
            src/main/resources/application-secret.yml
          target: /home/ec2-user/

      - name: 스프링 배포
        uses: appleboy/ssh-action@master
        env:
          GHCR_USER: ${{ secrets.GHCR_USER }}   # PAT 소유자 계정명
          GHCR_PAT:  ${{ secrets.GHCR_PAT }}    # read:packages 또는 write:packages
          DOCKER_IMAGE_NAME: sendy
        with:
          host: ${{ secrets.SPRING_EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: true
          script: |
            set -euo pipefail
            # 패키지가 Private이면 로그인 필요. (⚠️ username은 PAT 소유자 아이디여야 함)
            if [ -n "${GHCR_PAT:-}" ] && [ -n "${GHCR_USER:-}" ]; then
              echo "${GHCR_PAT}" | docker login ghcr.io -u "${GHCR_USER}" --password-stdin
            fi

            # (선택) 단일 이미지 직접 Pull — compose에서 사용하지 않으면 생략해도 됨
            # docker pull ghcr.io/${OWNER_LC}/${DOCKER_IMAGE_NAME}:latest || true

            # 문제를 빨리 드러내기 위해 pull을 분리
            docker-compose -f /home/ec2-user/docker-compose/docker-compose.prod.spring.yml down --remove-orphans
            docker-compose -f /home/ec2-user/docker-compose/docker-compose.prod.spring.yml pull
            docker-compose -f /home/ec2-user/docker-compose/docker-compose.prod.spring.yml up -d
            docker system prune -f
