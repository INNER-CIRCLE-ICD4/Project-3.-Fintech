name: deploy.yml
on:
  push:
    paths:
      - ".github/workflows/**"
      - "*/src/**"
      - "build.gradle"
      - "settings.gradle.kts"
      - "*/Dockerfile"
    branches:
      - develop

permissions:
  contents: write
  packages: write

jobs:
  makeTagAndRelease:
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.create_tag.outputs.new_tag }}
    steps:
      - uses: actions/checkout@v4
      - name: Create Tag
        id: create_tag
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.create_tag.outputs.new_tag }}
          release_name: Release ${{ steps.create_tag.outputs.new_tag }}
          body: ${{ steps.create_tag.outputs.changelog }}
          draft: false
          prerelease: false

  buildImageAndPush:
    name: 도커 이미지 빌드와 푸시
    needs: makeTagAndRelease
    runs-on: ubuntu-latest
    strategy:
      matrix:
        module: [
          sendy-legacy-api,
          sendy-notification-consumer,
          sendy-transfer-consumer,
          sendy-transfer-producer,
          sendy-user-producer
        ]
    steps:
      - uses: actions/checkout@v4

      - name: application-secret.yml 생성
        env:
          APPLICATION_SECRET: ${{ secrets.APPLICATION_SECRET_YML }}
        run: |
          mkdir -p ${{ matrix.module }}/src/main/resources
          echo "$APPLICATION_SECRET" > ${{ matrix.module }}/src/main/resources/application-secret.yml

      - name: Docker Buildx 설치
        uses: docker/setup-buildx-action@v2

      - name: 레지스트리 로그인
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: set lower case owner name
        run: echo "OWNER_LC=${OWNER,,}" >> $GITHUB_ENV
        env:
          OWNER: ${{ github.repository_owner }}

      - name: 빌드 앤 푸시
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./${{ matrix.module }}/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ env.OWNER_LC }}/${{ matrix.module }}:${{ needs.makeTagAndRelease.outputs.tag_name }}
            ghcr.io/${{ env.OWNER_LC }}/${{ matrix.module }}:latest

  deploy:
    runs-on: ubuntu-latest
    needs: [ buildImageAndPush ]
    steps:
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: 설정 파일 생성
        env:
          DOCKER_COMPOSE_PROD_SPRING: ${{ secrets.DOCKER_COMPOSE_PROD_SPRING_YML }}
        run: |
          mkdir -p docker-compose
          echo "$DOCKER_COMPOSE_PROD_SPRING" > docker-compose/docker-compose.prod.spring.yml

      - name: secrets EC2로 전송
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SPRING_EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: |
            docker-compose/docker-compose.prod.spring.yml,
            sendy-legacy-api/src/main/resources/application-secret.yml,
            sendy-notification-consumer/src/main/resources/application-secret.yml,
            sendy-shared-mongo/src/main/resources/application-secret.yml,
            sendy-shared-kafka/src/main/resources/application-secret.yml,
            sendy-transfer-consumer/src/main/resources/application-secret.yml,
            sendy-transfer-producer/src/main/resources/application-secret.yml,
            sendy-user-producer/src/main/resources/application-secret.yml
          target: "/home/ec2-user/"

      - name: 스프링 배포
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SPRING_EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            docker-compose -f /home/ec2-user/docker-compose/docker-compose.prod.spring.yml down --remove-orphans
            docker-compose -f /home/ec2-user/docker-compose/docker-compose.prod.spring.yml up -d
            docker system prune -f
        
    
