version: "3.8"

services:
  api-server:
    build:
      context: ..
    container_name: sendy-api
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=prd
      - SPRING_DATASOURCE_JDBC_URL=jdbc:mysql://mysql-master:3306/sendy
      - SPRING_DATASOURCE_USERNAME=sendy_master
      - SPRING_DATASOURCE_PASSWORD=sendy_master
    restart: always
    networks:
      - sendy-net
  mysql-master:
    image: mysql:8.0.42
    container_name: mysql-master
    ports:
      - "3306:3306"
    restart: always
    environment:
      - MYSQL_DATABASE=sendy
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_USER=sendy_master
      - MYSQL_PASSWORD=sendy_master
      - TZ=UTC
    command: # 명령어 실행
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
      - --lower_case_table_names=1
    volumes:
      - ./mysql/cnf/master.cnf:/etc/mysql/conf.d/my.cnf
      - ./mysql/initdb.d:/docker-entrypoint-initdb.d
    networks:
      - sendy-net
    tmpfs:
      - /var/lib/mysql

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - sendy-net
    depends_on:
      - prometheus

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - sendy-net
  redis:
    image: redis:latest
    container_name: my-redis
    ports:
      - "6379:6379"
    volumes:
      - ./redis/data:/data
      - ./redis/conf/redis.conf:/usr/local/conf/redis.conf
    restart: always
    command: redis-server /usr/local/conf/redis.conf
    labels:
      - "name=redis"
      - "mode=standalone"
    networks:
      - sendy-net

  zookeeper:
    container_name: sendy-zookeeper
    image: confluentinc/cp-zookeeper:7.5.1
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - sendy-net

  kafka:
    container_name: sendy-kafka
    image: confluentinc/cp-kafka:7.5.1
    hostname: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://localhost:9092'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - sendy-net

  mongo:
    image: mongo:8.0
    container_name: sendy-mongodb
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: sendy-mongoDB
      MONGO_INITDB_ROOT_PASSWORD: sendy123!
      # 기본 데이터베이스 생성
      MONGO_INITDB_DATABASE: notification
    ports:
      - "27017:27017"
    volumes:
      - ./db/mongo:/data/db
      - ./db/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - sendy-net


networks:
  sendy-net:

volumes:
  grafana-data:
  prometheus-data: